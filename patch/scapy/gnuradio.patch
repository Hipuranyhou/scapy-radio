diff --new-file -ru -x '.vscode*' orig/scapy/scapy/layers/dot15d4.py scapy/scapy/layers/dot15d4.py
--- orig/scapy/scapy/layers/dot15d4.py	2022-03-26 15:03:48.176550016 +0100
+++ scapy/scapy/layers/dot15d4.py	2022-03-27 12:23:42.493873452 +0200
@@ -36,6 +36,8 @@
     XByteField,
     XLEIntField,
     XLEShortField,
+    X3BytesField,
+    IntField,
 )
 
 # Fields #
diff --new-file -ru -x '.vscode*' orig/scapy/scapy/layers/gnuradio.py scapy/scapy/layers/gnuradio.py
--- orig/scapy/scapy/layers/gnuradio.py	1970-01-01 01:00:00.000000000 +0100
+++ scapy/scapy/layers/gnuradio.py	2022-03-27 12:23:42.493873452 +0200
@@ -0,0 +1,26 @@
+## This file is part of Scapy
+## See http://www.secdev.org/projects/scapy for more information
+## Copyright (C) Airbus DS CyberSecurity
+## Authors: Jean-Michel Picod, Arnaud Lebrun, Jonathan Christofer Demay
+## This program is published under a GPLv2 license
+
+"""
+Gnuradio layers, sockets and send/receive functions.
+"""
+
+from scapy.layers.dot15d4 import *
+
+
+class GnuradioPacket(Packet):
+    name = "Gnuradio header"
+    fields_desc = [
+        ByteField("proto", 0),
+        X3BytesField("reserved1", 0),
+        IntField("reserved2", 0)
+    ]
+
+
+## ZigBee
+bind_layers(GnuradioPacket, Dot15d4FCS, proto=2)
+
+conf.l2types.register(148, GnuradioPacket)
diff --new-file -ru -x '.vscode*' orig/scapy/scapy/modules/gnuradio.py scapy/scapy/modules/gnuradio.py
--- orig/scapy/scapy/modules/gnuradio.py	1970-01-01 01:00:00.000000000 +0100
+++ scapy/scapy/modules/gnuradio.py	2022-03-27 12:23:42.493873452 +0200
@@ -0,0 +1,277 @@
+# This file is part of Scapy
+# See http://www.secdev.org/projects/scapy for more information
+# Copyright (C) Airbus DS CyberSecurity
+# Authors: Jean-Michel Picod, Arnaud Lebrun, Jonathan Christofer Demay
+# This program is published under a GPLv2 license
+
+# changes based on
+# https://github.com/BastilleResearch/scapy-radio/blob/master/scapy/scapy/modules/gnuradio.py
+# https://github.com/jkulskis/scapy-radio/blob/master/scapy/scapy/modules/gnuradio.py
+
+"""
+Gnuradio layers, sockets and send/receive functions.
+"""
+
+from typing import List
+import xmlrpc.client
+import socket
+import struct
+import atexit
+import os
+import sys
+import subprocess
+import time
+import datetime
+import errno
+import logging
+
+from scapy.layers.gnuradio import GnuradioPacket
+import scapy.all as sp
+
+
+logger = logging.getLogger("scapy.gnuradio")
+logger.setLevel(logging.INFO)
+
+
+class GnuradioSocket(sp.SuperSocket):
+    desc = "read/write packets on a UDP Gnuradio socket"
+
+    def __init__(self, peer: str = "127.0.0.1") -> None:
+        super().__init__(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)
+        self.outs = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)
+        self.tx_addr = (peer, 52001)
+        self.rx_addr = (peer, 52002)
+        self.ins.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
+        self.outs.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
+        try:
+            self.ins.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)
+            self.outs.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)
+        except AttributeError:
+            pass
+        self.ins.bind(self.rx_addr)
+
+    def recv(self, x=sp.MTU):
+        data, addr = self.ins.recvfrom(x)
+        pkt = GnuradioPacket(data)
+        # check if a valid gnuradio protocol, otherwise return a raw Packet
+        if pkt.fields["proto"] not in range(1, 6):
+            return sp.Packet(data)
+        # strip gnuradio layer
+        return pkt[GnuradioPacket].payload
+
+    def send(self, pkt):
+        # add gnuradio layer
+        if not pkt.haslayer(GnuradioPacket):
+            pkt = GnuradioPacket() / pkt
+        sx = pkt.build()
+        if hasattr(pkt, "sent_time"):
+            pkt.sent_time = time.time()
+        self.outs.sendto(sx, self.tx_addr)
+
+
+@sp.conf.commands.register
+def gnuradio_stop_flowgraph():
+    if sp.conf.gr_process is not None:  # check if the process is running
+        sp.conf.gr_process.kill()
+        sp.conf.gr_process = None
+    for k, v in sp.conf.gr_process_io.items():
+        if v is not None and not v.closed:
+            v.close()
+            v = None
+
+
+@sp.conf.commands.register
+def gnuradio_get_vars(*args, gr_host="localhost", gr_port=8080):
+    if not args:
+        return
+    rv = {}
+    with xmlrpc.client.ServerProxy(f"http://{gr_host}:{gr_port}") as p:
+        for v in args:
+            try:
+                res = getattr(p, f"get_{v}")()
+                rv[v] = res
+            except xmlrpc.client.Fault as e:
+                logger.error(f"{e}")
+    return rv
+
+
+@sp.conf.commands.register
+def gnuradio_set_vars(gr_host="localhost", gr_port=8080, **kwargs):
+    if not kwargs:
+        return
+    with xmlrpc.client.ServerProxy(f"http://{gr_host}:{gr_port}") as p:
+        for k, v in kwargs.items():
+            try:
+                getattr(p, f"set_{k}")(v)
+            except xmlrpc.client.Fault as e:
+                logger.error(f"{e}")
+
+
+def wait_for_radio(gr_host="localhost", gr_port=8080, timeout=20):
+    logger.info(f"waiting {timeout}s for SDR to start up")
+    start_time = time.time()
+    # try to connect to the XMLRPC server in the flowgraph
+    while True:
+        try:
+            gnuradio_get_vars("channel")
+            break
+        except ConnectionRefusedError:
+            if time.time() - start_time > timeout:
+                logger.error(f"SDR did not start in the last {timeout}s")
+                sys.exit(1)
+            time.sleep(2)
+            continue
+        except ConnectionResetError:
+            logger.error("SDR not connected")
+            sys.exit(1)
+        except KeyError:  # may not have a varaible called "channel" in the flowgraph, but that's fine
+            logger.error("Flowgraph missing variable 'channel'")
+            sys.exit(1)
+    # wait an extra 3 seconds so that everything is up and running
+    time.sleep(3)
+    logger.info("SDR ready")
+
+
+@sp.conf.commands.register
+def gnuradio_start_flowgraph(flowgraph, params=[], env=None):
+    """Launches Gnuradio in background"""
+    # exit previous
+    if sp.conf.gr_process is not None:
+        gnuradio_stop_flowgraph()
+    sp.conf.gr_process_io = {
+        "stdout": open("/tmp/gnuradio.log", "w+"),
+        "stderr": open("/tmp/gnuradio-err.log", "w+"),
+    }
+    # try to start flowgraph
+    if flowgraph not in sp.conf.gr_flowgraphs:
+        raise AttributeError(f"Unknown gnuradio flowgraph: {flowgraph}")
+    try:
+        full_cmd = ["env", "python3", sp.conf.gr_flowgraphs[flowgraph]] + params
+        sp.conf.gr_process = subprocess.Popen(
+            full_cmd,
+            env=env,
+            stdout=sp.conf.gr_process_io["stdout"],
+            stderr=sp.conf.gr_process_io["stderr"],
+            stdin=subprocess.PIPE,
+            preexec_fn=os.setpgrp,
+        )
+        wait_for_radio()
+    except OSError:
+        return False
+    # nice
+    return True
+
+
+@sp.conf.commands.register
+def gnuradio_pause_flowgraph(gr_host="localhost", gr_port=8080):
+    with xmlrpc.client.ServerProxy(f"http://{gr_host}:{gr_port}") as p:
+        try:
+            p.stop()
+            p.wait()
+        except xmlrpc.client.Fault as f:
+            logger.error(f"{f.faultCode} => {f.faultString}")
+
+
+@sp.conf.commands.register
+def gnuradio_resume_flowgraph(gr_host="localhost", gr_port=8080):
+    with xmlrpc.client.ServerProxy(f"http://{gr_host}:{gr_port}") as p:
+        try:
+            p.start()
+        except xmlrpc.client.Fault as f:
+            logger.error(f"{f.faultCode} => {f.faultString}")
+
+
+@sp.conf.commands.register
+def srradio(pkts, inter=0.1, *args, **kwargs):
+    """send and receive using a Gnuradio socket"""
+    s = GnuradioSocket()
+    a, b = sp.sndrcv(s, pkts, inter=inter, *args, **kwargs)
+    s.close()
+    return a, b
+
+
+@sp.conf.commands.register
+def sniffradio(opened_socket=None, flowgraph=None, *args, **kwargs):
+    if flowgraph is not None:
+        gnuradio_start_flowgraph(flowgraph)
+    s = opened_socket if opened_socket is not None else GnuradioSocket()
+    rv = sp.sniff(opened_socket=s, *args, **kwargs)
+    if opened_socket is None:
+        s.close()
+    return rv
+
+
+def build_flowgraphs_dict():
+    # reset
+    sp.conf.gr_flowgraphs = {}
+    # find known
+    flowgraphs = dict.fromkeys(
+        [
+            os.path.join(sp.conf.gr_flowgraphs_path, x)
+            for x in os.listdir(sp.conf.gr_flowgraphs_path)
+            if os.path.isdir(os.path.join(sp.conf.gr_flowgraphs_path, x))
+        ],
+        0,
+    )
+    grc = dict.fromkeys(
+        [
+            os.path.join(x, x + ".grc")
+            for x in flowgraphs.keys()
+            if os.path.isfile(os.path.join(x, x + ".grc"))
+        ],
+        0,
+    )
+    top = dict.fromkeys(
+        [
+            os.path.join(x, "top_block.py")
+            for x in flowgraphs.keys()
+            if os.path.isfile(os.path.join(x, "top_block.py"))
+        ],
+        0,
+    )
+    # save mtimes for compare
+    for x in grc.keys():
+        grc[x] = os.stat(x).st_mtime
+    for x in top.keys():
+        top[x] = os.stat(x).st_mtime
+    # call grcc for changed grcs
+    for x in grc.keys():
+        flowgraphdir = os.path.dirname(x)
+        top_x = os.path.join(flowgraphdir, "top_block.py")
+        if top_x not in top or grc[x] > top[top_x]:
+            try:
+                subprocess.check_call(["grcc", f"-o {flowgraphdir}", x])
+                # save new top_block
+                if top_x not in top:
+                    top[top_x] = os.stat(top_x).st_mtime
+            except Exception:
+                logger.exception(f"Failed to grcc flowgraph {x}")
+    # save all top_blocks
+    for x in top.keys():
+        name = os.path.basename(os.path.normpath(os.path.dirname(x)))
+        sp.conf.gr_flowgraphs[name] = x
+
+
+def initial_setup():
+    # scapy config
+    sp.conf.L2socket = GnuradioSocket
+    sp.conf.L3socket = GnuradioSocket
+    sp.conf.L2listen = GnuradioSocket
+    # custom config
+    sp.conf.gr_flowgraphs_path = os.path.join(
+        os.path.expanduser("~"), ".config/scapy/radio/flowgraphs"
+    )
+    sp.conf.gr_flowgraphs = {}
+    sp.conf.gr_process = None
+    sp.conf.gr_process_io = {}
+    # init
+    if not os.path.exists(sp.conf.gr_flowgraphs_path):
+        os.makedirs(sp.conf.gr_flowgraphs_path)
+    for layer in ["gnuradio", "dot15d4"]:
+        sp.load_layer(layer)
+    build_flowgraphs_dict()
+    # exit
+    atexit.register(gnuradio_stop_flowgraph)
+
+
+initial_setup()
diff --new-file -ru -x '.vscode*' orig/scapy/scapy/sendrecv.py scapy/scapy/sendrecv.py
--- orig/scapy/scapy/sendrecv.py	2022-03-26 15:03:48.189882875 +0100
+++ scapy/scapy/sendrecv.py	2022-03-27 12:25:17.817141200 +0200
@@ -411,7 +411,7 @@
     """Internal function used by send and sendp"""
     need_closing = socket is None
     iface = resolve_iface(iface or conf.iface)
-    socket = socket or _func(iface)(iface=iface, **kargs)
+    socket = socket or _func(iface)(**kargs)
     results = __gen_send(socket, x, inter=inter, loop=loop,
                          count=count, verbose=verbose,
                          realtime=realtime, return_packets=return_packets)
